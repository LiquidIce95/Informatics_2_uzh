1) 
push(4) stack: (4)
push(1) stack: (4,1)
push(3) stack: (4,1,3)
pop() stack: (4,1)
push(8) stack:(4,1,8)
pop(S) stack: (), assuming that pip for a list/array pops all the elements in order


2)
enq(4) Q: (4)
enq(1) Q: (4,1)
enq(3) Q: (4,1,3)
deq() Q: (1,3)
enq(8) Q: (1,3,8)
deq() Q: (3,8)


3)
We initialize a stack of length n (,,,,,....,,,)
top1 (top of stack1) is 0, and top2 is n-1
now the stack 1 only adds elements from the left, and stack2 from the right

this way we can Implemetn both stacks just as usual with constant time pop and push operations
and only if both elements add up to n can they overflow.

4)

we implement both stacks as a double linked queeu
the characteristic of a que is that from right ( end of quee) we enque and from left ( start) we deque.
given two stack one stack 1 lies like that in the array : (bottom1,...,top1) and the second like this

(top2,...,bottom2) so together they look like (top2/bottom1,...,top1/bottom2) 

enque = push1, deque = pop2

enque -> (top2/bottom1,....,top1/bottom2) -> deque

since the node top and bottom are always instantly accessible the dequee and enque operations are constant
they simply update the pointers to the new nodes.

5)

for each linked list we enque on the left and deque on the right
similarly (left1/right2,....,right1/left2) push : enque1, pop: deque 2
also constant


